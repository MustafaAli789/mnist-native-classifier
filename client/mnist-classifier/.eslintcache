[{"C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\index.js":"1","C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\App.js":"2","C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\reportWebVitals.js":"3","C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\Components\\Canvas.js":"4"},{"size":500,"mtime":1608778215265,"results":"5","hashOfConfig":"6"},{"size":2055,"mtime":1608850816447,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":1522,"mtime":1608848091434,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"v761hg",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\index.js",[],["21","22"],"C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\App.js",["23","24"],"\nimport Canvas from './Components/Canvas'\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport './App.css'\nimport axios from 'axios'\nimport createMixins from '@material-ui/core/styles/createMixins';\n\nfunction App() {\n  let centerStyle = {display: 'flex', alignItems: 'center', justifyContent: 'center'}\n\n  const classifyNum = () => {\n\n    let canvas = document.getElementById(\"canvas\")\n\n    let img = document.getElementById(\"image\");\n    img.onload = function() {\n      let canvasResized = document.createElement(\"canvas\");\n      canvasResized.width = 28;\n      canvasResized.height = 28;\n      let ctxResized = canvasResized.getContext(\"2d\");\n      ctxResized.drawImage(img, 0, 0, 28, 28);\n\n      let imgd = ctxResized.getImageData(0, 0, 28, 28);\n      let pix = imgd.data;\n      let pixAlphaData = []\n       \n      // Loop over each pixel and invert the color.\n      for (var i = 3, n = pix.length; i < n; i += 4) {\n        pixAlphaData.push(pix[i])\n      }\n      console.log(pixAlphaData)\n\n      axios.post('http://127.0.0.1:5000/api/classify', {\"pixelMatrix\": pixAlphaData})\n        .then(response => alert(response.data.pred[0]));\n\n    }\n    img.setAttribute(\"src\", canvas.toDataURL())\n\n    // console.log(pixAlphaData)\n    // console.log(canvas.toDataURL())\n\n  }\n\n  return (\n    <div>\n      <Grid container>\n        <Grid style={centerStyle} item xs={12}>\n          <h1>Title</h1>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid style={centerStyle} item xs={12}>\n          <Canvas />\n          <img id=\"image\" src=\"\" style={{display: \"none\"}}></img>\n        </Grid>\n        <Grid style={{...centerStyle, marginTop: '1rem'}} item xs={12}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            startIcon={<SearchIcon />}\n            onClick={classifyNum}\n          >\n            Classify\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\reportWebVitals.js",[],"C:\\Users\\alimu\\Documents\\Projects\\native-ann-mnist-classifier\\client\\mnist-classifier\\src\\Components\\Canvas.js",["25"],"import React, { useRef, useEffect, useState } from 'react';\r\n\r\nfunction Canvas() {\r\n    \r\n    const [pos, _setPos] = useState({x:0,y:0})\r\n    const posRef = useRef(pos)\r\n\r\n    const setPos = data => {\r\n        posRef.current = data\r\n        _setPos(data)\r\n    }\r\n\r\n    function getMousePos(canvas, evt) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n          x: evt.clientX - rect.left,\r\n          y: evt.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    const canvasRef = useRef(null)\r\n\r\n    function draw(e) {\r\n        // mouse left button must be pressed\r\n        if(canvasRef === null) return\r\n        let ctx = canvasRef.current.getContext(\"2d\")\r\n\r\n        if (e.buttons !== 1) return;\r\n        ctx.beginPath(); // begin\r\n        \r\n        ctx.lineWidth = 25;\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = 'black';\r\n      \r\n        ctx.moveTo(posRef.current.x, posRef.current.y); // from\r\n        setPos(getMousePos(canvasRef.current, e));\r\n        ctx.lineTo(posRef.current.x, posRef.current.y); // to\r\n      \r\n        ctx.stroke(); // draw it!\r\n      }\r\n    \r\n    useEffect(() => {\r\n        document.addEventListener('mousemove', draw);\r\n        document.addEventListener('mousedown', (e) => setPos(getMousePos(canvasRef.current, e)));\r\n        document.addEventListener('mouseenter', (e) => setPos(getMousePos(canvasRef.current, e)));\r\n    }, []);\r\n\r\n    return (\r\n        <canvas ref={canvasRef} id=\"canvas\" height=\"280\" width=\"280\"></canvas>\r\n    )\r\n}\r\n\r\nexport default Canvas;",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":8,"column":8,"nodeType":"32","messageId":"33","endLine":8,"endColumn":20},{"ruleId":"34","severity":1,"message":"35","line":56,"column":11,"nodeType":"36","endLine":56,"endColumn":60},{"ruleId":"37","severity":1,"message":"38","line":46,"column":8,"nodeType":"39","endLine":46,"endColumn":10,"suggestions":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'createMixins' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.","ArrayExpression",["43"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [draw]",{"range":"46","text":"47"},[1386,1388],"[draw]"]