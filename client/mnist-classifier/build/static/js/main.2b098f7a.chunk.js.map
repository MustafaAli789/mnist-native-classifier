{"version":3,"sources":["Components/Canvas.js","Components/PredictionBar.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","useState","x","y","pos","_setPos","posRef","useRef","setPos","data","current","getMousePos","canvas","evt","rect","getBoundingClientRect","clientX","left","clientY","top","canvasRef","draw","e","ctx","getContext","buttons","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","useEffect","document","addEventListener","ref","id","height","width","PredictionBar","props","Box","display","alignItems","mr","Typography","variant","color","num","ml","LinearProgress","value","Math","round","minWidth","App","centerStyle","justifyContent","preds","setPreds","style","maxWidth","Grid","container","item","xs","flexDirection","Button","size","startIcon","onClick","getElementById","img","onload","canvasResized","createElement","ctxResized","drawImage","pix","getImageData","pixAlphaData","i","n","length","push","console","log","axios","post","then","response","alert","pred","setAttribute","toDataURL","clearRect","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2b098f7a.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nfunction Canvas() {\r\n    \r\n    const [pos, _setPos] = useState({x:0,y:0})\r\n    const posRef = useRef(pos)\r\n\r\n    const setPos = data => {\r\n        posRef.current = data\r\n        _setPos(data)\r\n    }\r\n\r\n    function getMousePos(canvas, evt) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        return {\r\n          x: evt.clientX - rect.left,\r\n          y: evt.clientY - rect.top\r\n        };\r\n    }\r\n\r\n    const canvasRef = useRef(null)\r\n\r\n    function draw(e) {\r\n        // mouse left button must be pressed\r\n        if(canvasRef === null) return\r\n        let ctx = canvasRef.current.getContext(\"2d\")\r\n\r\n        if (e.buttons !== 1) return;\r\n        ctx.beginPath(); // begin\r\n        \r\n        ctx.lineWidth = 25;\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = 'black';\r\n      \r\n        ctx.moveTo(posRef.current.x, posRef.current.y); // from\r\n        setPos(getMousePos(canvasRef.current, e));\r\n        ctx.lineTo(posRef.current.x, posRef.current.y); // to\r\n      \r\n        ctx.stroke(); // draw it!\r\n      }\r\n    \r\n    useEffect(() => {\r\n        document.addEventListener('mousemove', draw);\r\n        document.addEventListener('mousedown', (e) => setPos(getMousePos(canvasRef.current, e)));\r\n        document.addEventListener('mouseenter', (e) => setPos(getMousePos(canvasRef.current, e)));\r\n    }, []);\r\n\r\n    return (\r\n        <canvas ref={canvasRef} id=\"canvas\" height=\"280\" width=\"280\"></canvas>\r\n    )\r\n}\r\n\r\nexport default Canvas;","import LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst PredictionBar = props => {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\" mr={3}>\r\n            <Box>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">{props.num}</Typography>\r\n            </Box>\r\n            <Box width=\"100%\" mr={1} ml={1}>\r\n              <LinearProgress variant=\"determinate\" value={Math.round(props.value*100)} />\r\n            </Box>\r\n            <Box minWidth={35}>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n                props.value*100,\r\n              )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PredictionBar","\nimport Canvas from './Components/Canvas'\nimport PredictionBar from './Components/PredictionBar'\nimport { Button } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport './App.css'\nimport axios from 'axios'\nimport { useState } from 'react';\n\n\nimport createMixins from '@material-ui/core/styles/createMixins';\n\nfunction App() {\n  let centerStyle = {display: 'flex', alignItems: 'center', justifyContent: 'center'}\n\n  const [preds, setPreds] = useState([[0], [0], [0], [0], [0], [0], [0], [0], [0], [0] ])\n\n  const clearCanvas = () => {\n    let canvas = document.getElementById(\"canvas\")\n    let ctx = canvas.getContext(\"2d\")\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  }\n\n  const classifyNum = () => {\n\n    let canvas = document.getElementById(\"canvas\")\n\n    let img = document.getElementById(\"image\");\n    img.onload = function() {\n      let canvasResized = document.createElement(\"canvas\");\n      canvasResized.width = 28;\n      canvasResized.height = 28;\n      let ctxResized = canvasResized.getContext(\"2d\");\n      ctxResized.drawImage(img, 0, 0, 28, 28);\n\n      let imgd = ctxResized.getImageData(0, 0, 28, 28);\n      let pix = imgd.data;\n      let pixAlphaData = []\n       \n      // Loop over each pixel and invert the color.\n      for (var i = 3, n = pix.length; i < n; i += 4) {\n        pixAlphaData.push(pix[i])\n      }\n      console.log(pixAlphaData)\n\n      axios.post('/api/classify', {\"pixelMatrix\": pixAlphaData})\n        .then(response => {\n          alert(\"The prediction is: \" + response.data.pred[0])\n          setPreds(response.data.preds)\n        });\n\n    }\n    img.setAttribute(\"src\", canvas.toDataURL())\n  }\n\n  return (\n    <div style={{ maxWidth: '1000px' }}>\n      <Grid container>\n        <Grid style={centerStyle} item xs={12}>\n          <h1>MNIST Classifier</h1>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid item xs={4}></Grid>\n        <Grid style={{...centerStyle, flexDirection: 'column'}} item xs={4}>\n          <Canvas />\n          <div style={{flexDirection: 'row', width: '280px'}}>\n            <Button\n              style={{ width: '50%' }}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              startIcon={<SearchIcon />}\n              onClick={classifyNum}\n            >\n              Classify\n            </Button>\n            <Button\n              style={{ width: '50%' }}\n              variant=\"contained\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<ClearIcon />}\n              onClick={clearCanvas}\n            >\n              Clear\n            </Button>\n          </div>\n          <img id=\"image\" src=\"\" style={{display: \"none\"}}></img>\n        </Grid>\n        <Grid item xs={4}>\n          <PredictionBar value={preds[0][0]} num={0}/>\n          <PredictionBar value={preds[1][0]} num={1}/>\n          <PredictionBar value={preds[2][0]} num={2}/>\n          <PredictionBar value={preds[3][0]} num={3}/>\n          <PredictionBar value={preds[4][0]} num={4}/>\n          <PredictionBar value={preds[5][0]} num={5}/>\n          <PredictionBar value={preds[6][0]} num={6}/>\n          <PredictionBar value={preds[7][0]} num={7}/>\n          <PredictionBar value={preds[8][0]} num={8}/>\n          <PredictionBar value={preds[9][0]} num={9}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}